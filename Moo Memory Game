<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Moo Memory - Cow Matching Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Comic Sans MS', cursive, Arial, sans-serif;
            background: linear-gradient(135deg, #87CEEB 0%, #98FB98 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .game-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            padding: 30px;
            max-width: 600px;
            width: 100%;
            text-align: center;
        }

        .game-title {
            color: #2E7D32;
            margin-bottom: 5px;
            font-size: 2.8em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            font-weight: bold;
        }

        .game-subtitle {
            color: #4A6741;
            margin-bottom: 20px;
            font-size: 1.2em;
            font-style: italic;
        }

        .stats-panel {
            display: flex;
            justify-content: space-around;
            margin-bottom: 25px;
            background: #F0F8FF;
            padding: 15px;
            border-radius: 15px;
            border: 2px solid #4169E1;
        }

        .stat-item {
            text-align: center;
            font-weight: bold;
            color: #2E7D32;
        }

        .stat-label {
            font-size: 0.9em;
            color: #4A6741;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 1.4em;
            color: #1565C0;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 25px;
            background: #FFF8DC;
            padding: 20px;
            border-radius: 15px;
            border: 3px solid #8B4513;
        }

        .card {
            aspect-ratio: 1;
            background: #8B4513;
            border: 3px solid #654321;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3.5em;
            color: white;
            font-weight: bold;
            position: relative;
            overflow: hidden;
        }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.4);
            border-color: #A0522D;
        }

        .card.flipped {
            background: #F0F8FF;
            border-color: #4169E1;
            color: black;
            animation: flipAnimation 0.6s ease;
        }

        .card.matched {
            background: #90EE90;
            border-color: #228B22;
            animation: matchAnimation 0.8s ease;
            box-shadow: 0 0 15px rgba(34, 139, 34, 0.5);
        }

        .card.wrong {
            background: #FFB6C1;
            border-color: #DC143C;
            animation: shakeAnimation 0.5s ease;
        }

        .card-back {
            font-size: 1.2em;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            min-width: 140px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            background: linear-gradient(135deg, #5CBF60 0%, #4CAF50 100%);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn.pause-btn {
            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
        }

        .btn.pause-btn:hover {
            background: linear-gradient(135deg, #FFB74D 0%, #FF9800 100%);
        }

        .message-area {
            background: #E8F5E8;
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #4CAF50;
            margin-top: 20px;
        }

        .game-message {
            font-size: 1.2em;
            font-weight: bold;
            color: #2E7D32;
            margin-bottom: 10px;
        }

        .game-instructions {
            font-size: 1em;
            color: #4A6741;
            line-height: 1.4;
        }

        .celebration {
            animation: celebrateAnimation 2s ease-in-out;
            background: linear-gradient(135deg, #FFD700, #FFA000);
            color: #8B4513 !important;
        }

        .difficulty-selector {
            margin-bottom: 20px;
        }

        .difficulty-btn {
            background: #2196F3;
            margin: 0 5px;
            padding: 8px 16px;
            font-size: 0.9em;
            min-width: 80px;
        }

        .difficulty-btn.active {
            background: #1565C0;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);
        }

        @keyframes flipAnimation {
            0% { transform: rotateY(0deg); }
            50% { transform: rotateY(90deg); }
            100% { transform: rotateY(0deg); }
        }

        @keyframes matchAnimation {
            0% { transform: scale(1); }
            50% { transform: scale(1.15); background: #FFD700; }
            100% { transform: scale(1); }
        }

        @keyframes shakeAnimation {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-8px); }
            75% { transform: translateX(8px); }
        }

        @keyframes celebrateAnimation {
            0%, 100% { transform: scale(1); }
            25% { transform: scale(1.05) rotate(-2deg); }
            75% { transform: scale(1.05) rotate(2deg); }
        }

        @media (max-width: 480px) {
            .game-board {
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
                padding: 15px;
            }
            .card {
                font-size: 2.5em;
            }
            .game-title {
                font-size: 2.2em;
            }
            .stats-panel {
                flex-direction: column;
                gap: 10px;
            }
            .controls {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">üêÑ MOO MEMORY üêÆ</h1>
        <p class="game-subtitle">The Ultimate Cow Matching Adventure</p>
        
        <div class="stats-panel">
            <div class="stat-item">
                <div class="stat-label">Moves</div>
                <div class="stat-value" id="moves">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">Matched Pairs</div>
                <div class="stat-value" id="matched">0/8</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">Time</div>
                <div class="stat-value" id="time">00:00</div>
            </div>
        </div>

        <div class="difficulty-selector">
            <button class="btn difficulty-btn active" onclick="setDifficulty('easy')">Easy</button>
            <button class="btn difficulty-btn" onclick="setDifficulty('medium')">Medium</button>
            <button class="btn difficulty-btn" onclick="setDifficulty('hard')">Hard</button>
        </div>

        <div class="game-board" id="gameBoard"></div>

        <div class="controls">
            <button class="btn" onclick="startNewGame()">üéÆ New Game</button>
            <button class="btn pause-btn" onclick="togglePause()" id="pauseBtn">‚è∏Ô∏è Pause</button>
            <button class="btn" onclick="restartGame()">üîÑ Restart</button>
        </div>

        <div class="message-area">
            <div class="game-message" id="message">Welcome to Moo Memory!</div>
            <div class="game-instructions" id="instructions">
                Click on the cards to flip them and find matching pairs of colorful cows. 
                Match all 8 pairs to win the game! üèÜ
            </div>
        </div>
    </div>

    <script>
        // Enhanced cow collection with more variety
        const cowTypes = [
            'üêÑ', // Classic cow
            'üêÆ', // Cow face
            'ü§éüêÑ', // Brown cow
            '‚ö™üêÑ', // White cow
            '‚ö´üêÑ', // Black cow
            'üíöüêÑ', // Green cow
            'üíôüêÑ', // Blue cow
            'üíúüêÑ'  // Purple cow
        ];

        // Game state variables
        let gameBoard = [];
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;
        let startTime = null;
        let gameTimer = null;
        let isPaused = false;
        let currentDifficulty = 'easy';
        let flipTimeout = 1000; // Default flip delay

        // Difficulty settings
        const difficulties = {
            easy: { flipTime: 1200, pairs: 8, message: 'Take your time and enjoy!' },
            medium: { flipTime: 800, pairs: 8, message: 'Good challenge for memory!' },
            hard: { flipTime: 500, pairs: 8, message: 'Quick thinking required!' }
        };

        // Set game difficulty
        function setDifficulty(level) {
            currentDifficulty = level;
            flipTimeout = difficulties[level].flipTime;
            
            // Update UI
            document.querySelectorAll('.difficulty-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            updateInstructions();
            if (!gameTimer) startNewGame(); // Start new game if not already playing
        }

        // Update game instructions based on difficulty
        function updateInstructions() {
            const instructions = document.getElementById('instructions');
            const difficultyInfo = difficulties[currentDifficulty];
            instructions.innerHTML = `
                <strong>Difficulty: ${currentDifficulty.toUpperCase()}</strong><br>
                ${difficultyInfo.message}<br>
                Click cards to flip them and find matching cow pairs! üêÆ
            `;
        }

        // Initialize new game
        function startNewGame() {
            // Reset game state
            matchedPairs = 0;
            moves = 0;
            flippedCards = [];
            startTime = new Date();
            isPaused = false;
            
            // Update UI elements
            document.getElementById('moves').textContent = '0';
            document.getElementById('matched').textContent = '0/8';
            document.getElementById('time').textContent = '00:00';
            document.getElementById('message').textContent = 'Game Started! Find the matching cows!';
            document.getElementById('message').parentElement.className = 'message-area';
            document.getElementById('pauseBtn').innerHTML = '‚è∏Ô∏è Pause';

            // Create and shuffle cards
            createCardDeck();
            buildGameBoard();
            startGameTimer();
            updateInstructions();
        }

        // Restart current game
        function restartGame() {
            if (confirm('Are you sure you want to restart the current game?')) {
                startNewGame();
            }
        }

        // Create shuffled deck of cards
        function createCardDeck() {
            gameBoard = [];
            const pairsCount = difficulties[currentDifficulty].pairs;
            
            // Create pairs
            for (let i = 0; i < pairsCount; i++) {
                gameBoard.push(cowTypes[i], cowTypes[i]);
            }
            
            // Shuffle using Fisher-Yates algorithm
            shuffleArray(gameBoard);
        }

        // Shuffle array function
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        // Build the visual game board
        function buildGameBoard() {
            const boardElement = document.getElementById('gameBoard');
            boardElement.innerHTML = '';

            gameBoard.forEach((cow, index) => {
                const cardElement = document.createElement('div');
                cardElement.className = 'card';
                cardElement.dataset.index = index;
                cardElement.dataset.cow = cow;
                cardElement.onclick = () => handleCardClick(index);
                
                // Add card back design
                cardElement.innerHTML = '<div class="card-back">MOO?</div>';
                boardElement.appendChild(cardElement);
            });
        }

        // Handle card click events
        function handleCardClick(cardIndex) {
            if (isPaused) {
                showMessage('Game is paused! Click resume to continue.', 'instructions');
                return;
            }
            
            const cardElement = document.querySelector(`[data-index="${cardIndex}"]`);
            
            // Prevent clicking on already flipped or matched cards
            if (cardElement.classList.contains('flipped') || 
                cardElement.classList.contains('matched') || 
                flippedCards.length >= 2) {
                return;
            }

            // Flip the card
            flipCard(cardElement, cardIndex);
            
            // Check for matches when 2 cards are flipped
            if (flippedCards.length === 2) {
                moves++;
                document.getElementById('moves').textContent = moves;
                
                setTimeout(() => {
                    evaluateMatch();
                }, flipTimeout);
            }
        }

        // Flip a card and show its face
        function flipCard(cardElement, cardIndex) {
            cardElement.classList.add('flipped');
            cardElement.innerHTML = `<span style="animation: bounce 0.6s ease;">${gameBoard[cardIndex]}</span>`;
            
            flippedCards.push({
                index: cardIndex,
                cow: gameBoard[cardIndex],
                element: cardElement
            });
        }

        // Evaluate if flipped cards match
        function evaluateMatch() {
            const [firstCard, secondCard] = flippedCards;

            if (firstCard.cow === secondCard.cow) {
                handleSuccessfulMatch(firstCard, secondCard);
            } else {
                handleFailedMatch(firstCard, secondCard);
            }

            // Reset flipped cards array
            flippedCards = [];
        }

        // Handle successful card match
        function handleSuccessfulMatch(card1, card2) {
            // Mark cards as matched
            card1.element.classList.add('matched');
            card2.element.classList.add('matched');
            card1.element.classList.remove('flipped');
            card2.element.classList.remove('flipped');
            
            matchedPairs++;
            document.getElementById('matched').textContent = `${matchedPairs}/8`;

            // Check for game completion
            if (matchedPairs === 8) {
                setTimeout(() => {
                    completeGame();
                }, 500);
            } else {
                showMessage(`Great match! ${8 - matchedPairs} pairs remaining.`, 'message');
            }
        }

        // Handle failed card match
        function handleFailedMatch(card1, card2) {
            // Add wrong animation
            card1.element.classList.add('wrong');
            card2.element.classList.add('wrong');
            
            setTimeout(() => {
                // Flip cards back
                card1.element.classList.remove('flipped', 'wrong');
                card2.element.classList.remove('flipped', 'wrong');
                card1.element.innerHTML = '<div class="card-back">MOO?</div>';
                card2.element.innerHTML = '<div class="card-back">MOO?</div>';
            }, 600);

            showMessage('No match! Try again.', 'message');
        }

        // Complete the game
        function completeGame() {
            clearInterval(gameTimer);
            const endTime = new Date();
            const totalSeconds = Math.floor((endTime - startTime) / 1000);
            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;
            
            const messageElement = document.getElementById('message');
            const messageArea = messageElement.parentElement;
            
            messageElement.innerHTML = `
                üéâ <strong>CONGRATULATIONS!</strong> üéâ<br>
                You completed the game in <strong>${moves} moves</strong><br>
                Time taken: <strong>${minutes}:${seconds.toString().padStart(2, '0')}</strong>
            `;
            
            messageArea.classList.add('celebration');
            
            document.getElementById('instructions').innerHTML = `
                üèÜ <strong>Game Statistics:</strong><br>
                Difficulty: ${currentDifficulty.toUpperCase()} | 
                Efficiency: ${calculateEfficiency()}% | 
                Click "New Game" to play again!
            `;
        }

        // Calculate game efficiency percentage
        function calculateEfficiency() {
            const perfectMoves = 16; // Minimum moves needed (8 pairs √ó 2 flips)
            const efficiency = Math.round((perfectMoves / moves) * 100);
            return Math.min(efficiency, 100);
        }

        // Start game timer
        function startGameTimer() {
            gameTimer = setInterval(() => {
                if (!isPaused && startTime) {
                    const currentTime = new Date();
                    const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
                    const minutes = Math.floor(elapsedSeconds / 60);
                    const seconds = elapsedSeconds % 60;
                    
                    document.getElementById('time').textContent = 
                        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            }, 1000);
        }

        // Toggle pause/resume
        function togglePause() {
            isPaused = !isPaused;
            const pauseButton = document.getElementById('pauseBtn');
            
            if (isPaused) {
                pauseButton.innerHTML = '‚ñ∂Ô∏è Resume';
                showMessage('Game paused. Click resume to continue!', 'message');
            } else {
                pauseButton.innerHTML = '‚è∏Ô∏è Pause';
                showMessage('Game resumed! Keep matching those cows!', 'message');
            }
        }

        // Display messages to user
        function showMessage(text, elementId) {
            document.getElementById(elementId).textContent = text;
        }

        // Initialize game when page loads
        window.addEventListener('load', function() {
            updateInstructions();
            showMessage('Welcome to Moo Memory! Choose difficulty and click "New Game"', 'message');
        });

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            switch(event.key) {
                case ' ':
                    event.preventDefault();
                    if (gameTimer) togglePause();
                    break;
                case 'n':
                case 'N':
                    startNewGame();
                    break;
                case 'r':
                case 'R':
                    restartGame();
                    break;
            }
        });
    </script>
</body>
</html>
